#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 14, 2020 10:14:45 PM IST  platform: Windows NT

import sys
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
import cv2
import numpy as np

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def DETECT_FROM_WEBCAM():

    model = load_model("model-14.model")

    resMap = {
            0 : 'Mask On ',
            1 : 'Mask Off '
            }

    colorMap = {
            0 : (0,255,0),
            1 : (0,0,255)
            }

# def prepImg(pth):
#     return cv2.resize(pth,(224,224)).reshape(1,224,224,3)/255.0

    classifier = cv2.CascadeClassifier('haarcascade_frontalface_alt2.xml')

    source=cv2.VideoCapture(0)
    while True:
        ret,img = source.read()
        faces = classifier.detectMultiScale(cv2.cvtColor(img,cv2.COLOR_BGR2GRAY),1.1,5,minSize=(60, 60))

        for face in faces:
            slicedImg = img[face[1]:face[1]+face[3],face[0]:face[0]+face[2]]
            slicedImg = cv2.cvtColor(slicedImg, cv2.COLOR_BGR2RGB)
            slicedImg = cv2.resize(slicedImg, (224, 224))
            slicedImg = img_to_array(slicedImg)
            slicedImg = np.expand_dims(slicedImg, axis=0)
            slicedImg =  preprocess_input(slicedImg)
            pred = model.predict(slicedImg)
            acc = np.max(pred*100)
            s = str(acc)
            pred = np.argmax(pred)

            cv2.rectangle(img,(face[0],face[1]),(face[0]+face[2],face[1]+face[3]),colorMap[pred],2)
            cv2.putText(img, resMap[pred]+s+"%",(face[0],face[1]-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,(255,255,255),2)


        cv2.imshow('FaceMask Detection',img)
        if cv2.waitKey(1) & 0xff == ord('q'):
            break

    source.release()
    cv2.destroyAllWindows()
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import mask
    mask.vp_start_gui()
