#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 14, 2020 10:15:04 PM IST  platform: Windows NT

import sys
from tkinter import filedialog
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
import cv2
import numpy as np

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from PIL import Image, ImageTk

import mask_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    root.iconbitmap("face-mask.ico")
    top = Toplevel1 (root)
    mask_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    mask_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def DETECT_FROM_WEBCAM(self):

        model = load_model("mask_recog.h5")

        resMap = {
                0 : 'Mask On ',
                1 : 'Mask Off '
                }

        colorMap = {
                0 : (0,255,0),
                1 : (0,0,255)
                }



        classifier = cv2.CascadeClassifier('haarcascade_frontalface_alt2.xml')

        source=cv2.VideoCapture(0)
        while True:
            ret,img = source.read()
            faces = classifier.detectMultiScale(cv2.cvtColor(img,cv2.COLOR_BGR2GRAY),1.1,5,minSize=(60, 60))

            for face in faces:
                slicedImg = img[face[1]:face[1]+face[3],face[0]:face[0]+face[2]]
                slicedImg = cv2.cvtColor(slicedImg, cv2.COLOR_BGR2RGB)
                slicedImg = cv2.resize(slicedImg, (224, 224))
                slicedImg = img_to_array(slicedImg)
                slicedImg = np.expand_dims(slicedImg, axis=0)
                slicedImg =  preprocess_input(slicedImg)
                pred = model.predict(slicedImg)
                acc = np.max(pred*100)
                s = str(acc)
                pred = np.argmax(pred)

                cv2.rectangle(img,(face[0],face[1]),(face[0]+face[2],face[1]+face[3]),colorMap[pred],2)
                cv2.putText(img, resMap[pred]+s+"%",(face[0],face[1]-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,colorMap[pred],2)


            cv2.imshow('FaceMask Detection',img)
            if cv2.waitKey(1) & 0xff == ord('q'):
                break

        source.release()
        cv2.destroyAllWindows()


    def DETECT_FROM_IMAGE(self):

            model = load_model("mask_recog.h5")

            resMap = {
                    0 : 'Mask On ',
                    1 : 'Mask Off '
                }

            colorMap = {
                    0 : (0,255,0),
                    1 : (0,0,255)
                }

            # def prepImg(pth):
            #     return cv2.resize(pth,(224,224)).reshape(1,224,224,3)/255.0

            classifier = cv2.CascadeClassifier('haarcascade_frontalface_alt2.xml')
            filename = filedialog.askopenfilename(initialdir =  "/", title = "Select A File", filetype =
                    (("jpeg files","*.jpg"),("all files","*.*")) )
            img = cv2.imread(filename)
            faces = classifier.detectMultiScale(cv2.cvtColor(img,cv2.COLOR_BGR2GRAY),1.1,5,minSize=(60, 60))
            for face in faces:

                slicedImg = img[face[1]:face[1]+face[3],face[0]:face[0]+face[2]]
                slicedImg = cv2.cvtColor(slicedImg, cv2.COLOR_BGR2RGB)
                slicedImg = cv2.resize(slicedImg, (224, 224))
                slicedImg = img_to_array(slicedImg)
                slicedImg = np.expand_dims(slicedImg, axis=0)
                slicedImg =  preprocess_input(slicedImg)
                pred = model.predict(slicedImg)
                acc = np.max(pred*100)
                s = str(acc)
                pred = np.argmax(pred)

                cv2.rectangle(img,(face[0],face[1]),(face[0]+face[2],face[1]+face[3]),colorMap[pred],2)
                cv2.putText(img, resMap[pred]+s+"%",(face[0],face[1]-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,colorMap[pred],2)


            cv2.imshow('FaceMask Detection',img)
            cv2.waitKey(0)
            cv2.destroyAllWindows()




    def DETECT_FROM_VIDEO(self):

            model = load_model("mask_recog.h5")

            resMap = {
                    0 : 'Mask On ',
                    1 : 'Mask Off '
                }

            colorMap = {
                    0 : (0,255,0),
                    1 : (0,0,255)
                }

            # def prepImg(pth):
            #     return cv2.resize(pth,(224,224)).reshape(1,224,224,3)/255.0

            classifier = cv2.CascadeClassifier('haarcascade_frontalface_alt2.xml')
            filename = filedialog.askopenfilename(initialdir =  "/", title = "Select A File", filetype =
                    (("all video format", ".mp4"),("all video format", ".flv"),("all video format", ".avi"),("all files","*.*")) )
            source=cv2.VideoCapture(filename)
            while True:
                ret,img = source.read()
                if ret==False:
                    break
                faces = classifier.detectMultiScale(cv2.cvtColor(img,cv2.COLOR_BGR2GRAY),1.1,5,minSize=(60, 60))

                for face in faces:
                    slicedImg = img[face[1]:face[1]+face[3],face[0]:face[0]+face[2]]
                    slicedImg = cv2.cvtColor(slicedImg, cv2.COLOR_BGR2RGB)
                    slicedImg = cv2.resize(slicedImg, (224, 224))
                    slicedImg = img_to_array(slicedImg)
                    slicedImg = np.expand_dims(slicedImg, axis=0)
                    slicedImg =  preprocess_input(slicedImg)
                    pred = model.predict(slicedImg)
                    acc = np.max(pred*100)
                    s = str(acc)
                    pred = np.argmax(pred)

                    cv2.rectangle(img,(face[0],face[1]),(face[0]+face[2],face[1]+face[3]),colorMap[pred],2)
                    cv2.putText(img, resMap[pred]+s+"%",(face[0],face[1]-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,colorMap[pred],2)


                cv2.imshow('FaceMask Detection',img)
                if cv2.waitKey(1) & 0xff == ord('q'):
                    break

            source.release()
            cv2.destroyAllWindows()



    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1200x650+71+30")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1,  1)
        top.title("Face-Mask-Detector")
        top.configure(background="#ffffff")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.317, rely=0.031, height=452, width=430)
        self.Label1.configure(background="#000000")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightcolor="#ffff80")
        photo_location = os.path.join(prog_location,"image.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.71, rely=0.923, height=51, width=353)
        self.Label2.configure(background="#400080")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {@Microsoft JhengHei UI} -size 13")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(text='''Â©Developed by Sourav Mohanty''')

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.0, rely=0.662, height=174, width=387)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#000080")
        self.Button1.configure(borderwidth="10")

        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Berlin Sans FB Demi} -size 17 -weight bold")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="#ffffff")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="ridge")
        self.Button1.configure(text='''DETECT_FROM_WEBCAM''')
        self.Button1.configure(command = self.DETECT_FROM_WEBCAM)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.0, rely=0.923, height=51, width=52)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"gitam1.jpg")
        global _img1
        _img1 = ImageTk.PhotoImage(file=photo_location)
        self.Label3.configure(image=_img1)
        self.Label3.configure(justify='left')
        self.Label3.configure(text='''Label''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.042, rely=0.923, height=51, width=804)
        self.Label4.configure(background="#400080")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Arial Black} -size 13 -weight bold")
        self.Label4.configure(foreground="#ffffff")
        self.Label4.configure(text='''MINI PROJECT BATCH K2 YEAR-2017-2021''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.0, rely=0.0, height=31, width=1213)
        self.Label6.configure(background="#400080")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(font="-family {Segoe UI} -size 12")
        self.Label6.configure(foreground="#ffffff")
        self.Label6.configure(text='''Face Mask Detection Using Transfer Learning Model-MobileNet_V2 , Keras,OpenCV          APP DEVELPOMENT :-  Tkinter, PAGE       https://github.com/souravcoder99''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.0, rely=0.046, height=401, width=384)
        self.Label7.configure(background="#0000a0")
        self.Label7.configure(borderwidth="10")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"stop.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Label7.configure(image=_img2)
        self.Label7.configure(relief="ridge")

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.317, rely=0.662, height=174, width=427)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#000080")
        self.Button2.configure(borderwidth="10")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font="-family {Berlin Sans FB Demi} -size 17 -weight bold")
        self.Button2.configure(foreground="#ffffff")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(relief="ridge")
        self.Button2.configure(text='''DETECT_FROM_IMAGE''')
        self.Button2.configure(command = self.DETECT_FROM_IMAGE)

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.667, rely=0.662, height=174, width=407)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#000080")
        self.Button3.configure(borderwidth="10")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font="-family {Berlin Sans FB Demi} -size 17 -weight bold")
        self.Button3.configure(foreground="#ffffff")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(relief="ridge")
        self.Button3.configure(text='''DETECT_FROM_VIDEO''')
        self.Button3.configure(command = self.DETECT_FROM_VIDEO)

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.675, rely=0.046, height=401, width=424)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"video.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Label5.configure(image=_img3)

if __name__ == '__main__':
    vp_start_gui()
